<?xml version='1.0'?>
<robot name="noor_robot" xmlns:xacro="http://www.ros.org/wiki/xacro">



   <gazebo>
  <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so" >

    <!-- Plugin update rate in Hz -->
    <updateRate>50</updateRate>

    <!-- Name of left joint, defaults to left_joint -->
    <leftJoint>left_wheel_joint</leftJoint>

    <!-- Name of right joint, defaults to right_joint -->
    <rightJoint>right_wheel_joint</rightJoint>

    <!-- The distance from the center of one wheel to the other, in meters, defaults to 0.34 m -->
    <wheelSeparation>0.41</wheelSeparation>

    <!-- Diameter of the wheels, in meters, defaults to 0.15 m -->
    <wheelDiameter>0.14</wheelDiameter>

    <!-- Wheel acceleration, in rad/s^2, defaults to 0.0 rad/s^2 -->
    <wheelAcceleration>1.0</wheelAcceleration>

    <!-- Maximum torque which the wheels can produce, in Nm, defaults to 5 Nm -->
    <wheelTorque>20</wheelTorque>

    <!-- Topic to receive geometry_msgs/Twist message commands, defaults to cmd_vel -->
    <commandTopic>cmd_vel</commandTopic>

    <!-- Topic to publish nav_msgs/Odometry messages, defaults to odom -->
    <odometryTopic>odom</odometryTopic>

    <!-- Odometry frame, defaults to odom -->
    <odometryFrame>odom</odometryFrame>

    <!-- Robot frame to calculate odometry from, defaults to base_footprint -->
    <robotBaseFrame>base_footprint</robotBaseFrame>

    <!-- Odometry source, 0 for ENCODER, 1 for WORLD, defaults to WORLD -->
    <odometrySource>1</odometrySource>

    <!-- Set to true to publish transforms for the wheel links, defaults to false -->
    <publishWheelTF>false</publishWheelTF>

    <!-- Set to true to publish transforms for the odometry, defaults to true -->
    <publishOdom>true</publishOdom>

    <!-- Set to true to publish sensor_msgs/JointState on /joint_states for the wheel joints, defaults to false -->
    <publishWheelJointState>true</publishWheelJointState>

    <!-- Set to true to swap right and left wheels, defaults to true -->
    <legacyMode>false</legacyMode>
  </plugin>
</gazebo>


 <!-- LIDAR Sensor -->
    <gazebo reference="laser">
        <!-- Define a sensor of type "ray" (commonly used for LiDAR sensors) -->
        <sensor type="ray" name="lidar_sensor">
            <!-- Set the pose of the sensor relative to the link it's attached to (x, y, z, roll, pitch, yaw) -->
            <pose>0 0 0 0 0 0</pose>
            <!-- Enable or disable visualization of the sensor in Gazebo -->
            <visualize>true</visualize>
            <!-- Set the update rate for the sensor in Hz (how often it produces data) -->
            <update_rate>20</update_rate>
            <!-- Define the ray properties of the sensor (LiDAR emits rays to measure distances) -->
            <ray>
                <scan>
                    <horizontal>
                        <!-- Number of samples (rays) per scan -->
                        <samples>720</samples>
                        <!-- Resolution of the scan (typically 1 means 1 ray per angle unit) -->
                        <resolution>1</resolution>
                        <!-- Minimum angle of the scan (in radians, -3π/4 for a 270-degree scan) -->
                        <min_angle>-1.570796</min_angle>
                        <!-- Maximum angle of the scan (in radians, 3π/4 for a 270-degree scan) -->
                        <max_angle>1.570796</max_angle>
                    </horizontal>
                </scan>

                <range>
                    <!-- Minimum range (distance) the sensor can detect -->
                    <min>0.10</min>
                    <!-- Maximum range (distance) the sensor can detect -->
                    <max>10.0</max>
                    <!-- Resolution of the distance measurements (smallest measurable distance change) -->
                    <resolution>0.01</resolution>
                </range>

                <!-- Define noise characteristics for the sensor -->
                <noise>
                    <!-- Type of noise (Gaussian noise is commonly used for sensors) -->
                    <type>gaussian</type>
                    <!-- Mean value of the noise (0.0 means no bias) -->
                    <mean>0.0</mean>
                    <!-- Standard deviation of the noise (how much variation there is) -->
                    <stddev>0.01</stddev>
                </noise>
            </ray>

            <!-- Attach a Gazebo plugin to simulate the LiDAR sensor in ROS -->
            <plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_laser.so">
                <!-- Define the ROS topic name where the LiDAR data will be published -->
                <topicName>/scan</topicName>

                <!-- Specify the frame name associated with the LiDAR link (used for transformations) -->
                <frameName>laser</frameName>
            </plugin>
        </sensor>
    </gazebo>

     <gazebo reference="camera">
  <sensor name="camera_link_optical_camera" type="depth">
  <material>Gazebo/Black</material>
    <update_rate>20</update_rate>
    <camera>
      <horizontal_fov>${70.0*3.14/180.0}</horizontal_fov>
      <vertical_fov>${43.0*3.14/180.0}</vertical_fov>
      <image>
        <width>680</width>
        <height>480</height>
        <format>R8G8B8</format>
      </image>
      <clip>
        <near>0.05</near>
        <far>3</far>
      </clip>
    </camera>
    <plugin name="camera_plugin" filename="libgazebo_ros_openni_kinect.so">
      <baseline>0.2</baseline>
      <alwaysOn>true</alwaysOn>
      <updateRate>1.0</updateRate>
      <cameraName>camera_ir</cameraName>
      <imageTopicName>/camera/color/image_raw</imageTopicName>
      <cameraInfoTopicName>/camera/color/camera_info</cameraInfoTopicName>
      <depthImageTopicName>/camera/depth/image_raw</depthImageTopicName>
      <depthImageInfoTopicName>/camera/depth/camera_info</depthImageInfoTopicName>
      <pointCloudTopicName>/camera/depth/points</pointCloudTopicName>
      <frameName>camera</frameName>
        <min_depth>0.1</min_depth>
        <max_depth>100.0</max_depth>
      <pointCloudCutoff>0.5</pointCloudCutoff>
      <pointCloudCutoffMax>10.0</pointCloudCutoffMax>
      <distortionK1>0.00000001</distortionK1>
      <distortionK2>0.00000001</distortionK2>
      <distortionK3>0.00000001</distortionK3>
      <distortionT1>0.00000001</distortionT1>
      <distortionT2>0.00000001</distortionT2>
      <CxPrime>0</CxPrime>
      <Cx>0</Cx>
      <Cy>0</Cy>
      <focalLength>0</focalLength>
      <hackBaseline>0</hackBaseline>
    </plugin>
  </sensor>
</gazebo>


<gazebo reference="caster_wheel">
        <kp value="10000000.0"/>
        <kd value="1.0"/>
        <mu1>0.3</mu1>
        <mu2>0.3</mu2>
          <material>Gazebo/Black</material>
    </gazebo> 
       


    <gazebo reference="base_link">
        <material>Gazebo/White</material>
    </gazebo>
  
   

    <gazebo reference="tablet">
        <material>Gazebo/Black</material>
    </gazebo>

    <gazebo reference="right_wheel">
        <material>Gazebo/Black</material>
    </gazebo>
    <gazebo reference="left_wheel">
        <material>Gazebo/Black</material>
    </gazebo>
    


    <gazebo reference="laser">
        <material>Gazebo/Black</material>
    </gazebo>

</robot>
